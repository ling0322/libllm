// The MIT License (MIT)
//
// Copyright (c) 2023 Xiaoyang Chen
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include <string>
#include <functional>
#include <memory>
#include "libllm/lut/span.h"
#include "libllm/llm_cpp.h"

namespace libllm {

struct QA {
  std::string question;
  std::string answer;
};

// statistics for a LLM completion in dialog.
struct ChatOutput {
  int numAnswerTokens;
  std::string answer;

  double promptDuration;
  double answerDuration;

  ChatOutput();
};

/// @brief Interface for dialog prompt builder.
class PromptBulder {
 public:
  /// @brief Create an instance of PromptBulder according to the LLM model name.
  /// @param modelName LLM model name.
  /// @return An instance of PromptBulder.
  static std::shared_ptr<PromptBulder> create(const std::string &modelName);

  virtual ~PromptBulder() = default;

  // build the prompt from history and current question.
  virtual std::shared_ptr<llm::Prompt> buildPrompt(std::shared_ptr<llm::Model> model,
                                                   lut::Span<const QA> history,
                                                   const std::string &question) = 0;

  /// @brief Get the step sequence for generation.
  /// @return the stop sequence in string.
  virtual std::string getStopSeq() = 0; 
};

class ChatGLM2PromptBuilder : public PromptBulder {
 public:
  std::shared_ptr<llm::Prompt> buildPrompt(std::shared_ptr<llm::Model> model,
                                           lut::Span<const QA> history,
                                           const std::string &question) override; 
  std::string getStopSeq() override;
};

class ChatGLM3PromptBuilder : public PromptBulder {
 public:
  std::shared_ptr<llm::Prompt> buildPrompt(std::shared_ptr<llm::Model> model,
                                           lut::Span<const QA> history,
                                           const std::string &question) override; 
  std::string getStopSeq() override;
};

class LlamaPromptBuilder : public PromptBulder {
 public:
  std::shared_ptr<llm::Prompt> buildPrompt(std::shared_ptr<llm::Model> model,
                                           lut::Span<const QA> history,
                                           const std::string &question) override; 
  std::string getStopSeq() override;
};

// llm dialog manager.
class DialogManager {
 public:
  DialogManager(
      std::shared_ptr<llm::Model> model,
      std::shared_ptr<PromptBulder> promptBuilder);

  // chat with LLM. Once a token was generated by LLM, onTokenCallback will be invoked by the
  // token (if onTokenCallback is not empty). Once answering was compeleted, returns ChatOutput.
  ChatOutput chat(const std::string &question,
                  std::function<void(const std::string &)> onTokenCallback = {});

 private:
  std::string _stop;
  std::shared_ptr<llm::Model> _model;
  std::shared_ptr<PromptBulder> _promptBuilder;
  std::vector<QA> _history;
};

}  // namespace libllm
